// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	model "github.com/alex-dev-master/fibonacci.git/intrernal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockFibonacci is a mock of Fibonacci interface.
type MockFibonacci struct {
	ctrl     *gomock.Controller
	recorder *MockFibonacciMockRecorder
}

// MockFibonacciMockRecorder is the mock recorder for MockFibonacci.
type MockFibonacciMockRecorder struct {
	mock *MockFibonacci
}

// NewMockFibonacci creates a new mock instance.
func NewMockFibonacci(ctrl *gomock.Controller) *MockFibonacci {
	mock := &MockFibonacci{ctrl: ctrl}
	mock.recorder = &MockFibonacciMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFibonacci) EXPECT() *MockFibonacciMockRecorder {
	return m.recorder
}

// GetSlice mocks base method.
func (m *MockFibonacci) GetSlice(data model.Fibonacci) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlice", data)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlice indicates an expected call of GetSlice.
func (mr *MockFibonacciMockRecorder) GetSlice(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlice", reflect.TypeOf((*MockFibonacci)(nil).GetSlice), data)
}
